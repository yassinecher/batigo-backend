from sklearn.tree import DecisionTreeRegressor
import joblib
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Charger les données
df = pd.read_csv("chemin/vers/dataset_construction_ml.csv")  # Remplace par le bon chemin

# Encodage des variables catégorielles
df['type_projet'] = df['type_projet'].astype('category').cat.codes
df['conditions_meteo'] = df['conditions_meteo'].astype('category').cat.codes

# Définir les features et la cible
X = df[['type_projet', 'budget_estime', 'duree_estimee', 'incident_qualite',
        'incident_securite', 'materiaux_defectueux', 'conditions_meteo']]
y = df['budget_reel']

# Normalisation
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split des données
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Entraînement du modèle
tree = DecisionTreeRegressor(max_depth=5)
tree.fit(X_train, y_train)

# Sauvegarde du modèle et du scaler
joblib.dump(tree, "decision_tree_model.joblib")
joblib.dump(scaler, "scaler.joblib")

print("Modèle et scaler sauvegardés avec succès.")
